<?php
/**
 * @file
 * Code for the TM Invitations feature.
 */

include_once 'tm_invitations.features.inc';

/*
 * Implements hook permission
 */
function tm_invitations_permission() {
  return array(
    'tm invite users' => array(
      'title' => t('Invite users'),
      'description' => t('Access to invite users page.'),
    ),
    'tm invite unlimited' => array(
      'title' => t('Allow invite unlimited users'),
      'description' => t('In other case, the limit is 10 email per page request.'),
    ),
    'tm invite own chapters' => array(
      'title' => t('Allow invite users to own chapters'),
      'description' => t('Access to own chapters/%/invite page.'),
    ),
    'tm invite all chapters' => array(
      'title' => t('Allow invite users to all chapters'),
      'description' => t('Access to all chapters/%/invite pages.'),
    ),
  );
}

/*
 * Implements hook menu
 */
function tm_invitations_menu(){
  $items['invite'] = array(
    'title' => 'Invite Members',
    'title callback' => 't',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_invitations_invite_form'),
    'access arguments' => array('tm invite users'),
    'class' => 'invite-header',
    'type' => MENU_CALLBACK,
  );
  $items['chapters/%/invitations'] = array(
    'title' => 'Invite Members to Chapter',
    'title callback' => 't',
    'page callback' => 'chapter_invitations_page',
    'page arguments' => array('tm_invitations_invite_form'),
    'access arguments' => array('tm invite own chapters'),
    'class' => 'invite-header',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/* 
 * Chapters invitations page
 */
function chapter_invitations_page() {
  global $user;
  $orig_path = _orig_path();
  // Check: is current path correct?
  if($orig_path) {
    $form = drupal_get_form('tm_invitations_invite_form');
    $output = drupal_render($form);
    $output .= views_embed_view('invitations', 'default');
    // Check: has the user permission to access this page?
    if(!user_access('tm invite all chapters')) {
      $nid = _orig_nid();
      if(!tm_users_is_chapter_leader($user->uid, $nid)) {
        $output = drupal_access_denied();
      }
    }
  }
  // The current path is not correct.
  else {
    $output = drupal_not_found();
  }
  return $output;
}

/* 
 * Invitations form
 */
function tm_invitations_invite_form($form, &$form_state) {
  $form['description'] = array(
    '#markup' => t('<p>You can invite and pre-approve members to your chapter using the bulk add form below. Invited members will automatically join your chapter when they sign up and also be approved. (Note that they need to use the email address you invite them with for the pre-approval to occur)</p>'), 
    '#weight' => -1,
  );
  $description = 'Email addresses must be separated by comma, space or newline.';
  if(!user_access('tm invite unlimited')) {
    $description .= '<br>Enter up to 10 email addresses.';
  }
  $form['invitations'] = array(
    '#type' =>'textarea',
    '#rows' => 5,
    '#description' =>t($description),
    );
  $nid = _orig_nid();
  $form['nid'] = array(
    '#type' =>'hidden',
    '#default_value' => $nid,
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Send Invitations'),
    '#id' => 'edit-submit'  
  );
  return $form;
}

/* 
 * Form validator
 * Up to ten only
 * valid email addresses from users that don't have an account
 */
function tm_invitations_invite_form_validate($form, &$form_state) {
  $invalid = array();
  $emails = preg_split("/[\s,]+/", $form_state['values']['invitations']);
  $emails = array_unique($emails);
  foreach ($emails as $email) {
    $email = preg_replace('/[[:^print:]]/', '', $email);  // remove non printable characters for Android
    $email = trim($email);
    if ($email == '') {
      continue;
    }
    if (!valid_email_address($email)) {
      $invalid[] = $email;
    }
  }
  // check permission for invite unlimited
  if(!user_access('tm invite unlimited') && count($emails) > 10) {
    form_set_error('invitations', t('You have entered more than ten emails'));
  }
  if ($invalid) {
    $invalid = implode(", ", $invalid);
    form_set_error('invitations', t('The following addresses are invalid: %invalid.', array('%invalid' => $invalid)));
  }
}

/* 
 * Submit function
 */
function tm_invitations_invite_form_submit($form, &$form_state) {
  global $user;
  $account = user_load($user->uid);
  $is_registered = array();
  $emails = preg_split("/[\s,]+/", $form_state['values']['invitations']);
  $emails = array_unique($emails);
  $nid = $form_state['values']['nid'];
  $count = 0;
  foreach($emails as $email){
    $email = preg_replace('/[[:^print:]]/', '', $email);  // remove non printable characters for Android
    $email = trim($email);
    if ($email == '') {
      continue;
    }
    if (user_load_by_mail($email)){
      $is_registered[] = $email; // user already exists
    }
    else {
    // send out an email
    tm_invitations_send_email($email, $account);
    // add to db
    $invite = db_insert('tm_invitations')
      ->fields(array(
        'email' => trim($email),
        'uid' => $user->uid,
        'nid' => $nid,
        'followed' => 0,
        'created' => REQUEST_TIME,
      ))
      ->execute();
    $count++;
    }
  } 
  if ($count == 1) {
    drupal_set_message(t("Thanks for spreading the word! Your invitation has been sent."));
  }
  else {
    drupal_set_message(t("Thanks for spreading the word! You've sent $count invitations!"));
  }
  if ($is_registered) {
    $is_registered = implode(", ", $is_registered);
    drupal_set_message(t('The following users already has accounts: %is_registered.', array('%is_registered' => $is_registered)));
  }
  if ($nid == 0) {
    drupal_goto("user/$user->uid");
  }
  else {
    drupal_goto("node/$nid");
  }
}

/*
 * Hook user presave
 * If there are multiple inviters, follow them all 
 */
function tm_invitations_user_presave(&$edit, $account, $category){
  if ($account->is_new){
    // Check email in tm_invitations table, and if it there, use the last invite record.
    $invites = db_select('tm_invitations', 'i')
        ->fields('i')
        ->condition('accepted',0,'=')
        ->condition('email',$account->mail,'=')
        ->orderBy('created', 'DESC')
        ->range(0,1)
        ->execute();
    // Calculate uid for the new user      
    $users = db_select('users');
    $users->addExpression('MAX(uid)');
    $uid = $users->execute()->fetchField();
    $uid += 1;
    $account->uid = $uid;
    // loop through invites
    while ($invite = $invites->fetchAssoc()){
      // Follow for the inviter
       if ($invite['nid'] == 0) {
        $flag = flag_get_flag('follow_members');
        $flag->flag('flag', $invite['uid'], $account, TRUE);
      } 
      // Join Chapter
      else {
        $flag = flag_get_flag('signup');
        $flag->flag('flag', $invite['nid'], $account, TRUE);
      }
      // if person who invited is a chapter leader, change to approved
      $inviter = user_load($invite['uid']);
      if(user_access('tm invite own chapters', $inviter) || user_access('tm invite unlimited', $inviter)) {
        if ($role = user_role_load_by_name('approved user')) {
          $edit['roles'][$role->rid] = $role->rid;
          // send approval email
          $approval_text = "Your account has been approved by " . $inviter->field_user_first_name[LANGUAGE_NONE][0]['value'] . ".";
          tm_notifications_notify('user_approved', $account, array('user' => $account, '__PROFILE_URL__' => "community", '__APPROVAL_INTRO_TEXT__' => $approval_text));
          // Display a message about approval
          drupal_set_message(t('Your account has been pre-approved, welcome!'));
        }
      }
      // update this record as accepted
      db_update('tm_invitations')
        ->fields(array(
          'accepted' => REQUEST_TIME))
        ->condition('id', $invite['id'], '=')
        ->execute();
    }
  }
}

/* Email sending function */
function tm_invitations_send_email($email, $user){

    if (isset($user->language)) $language = LANGUAGE_NONE;
    else $language = $user->language;
    $name = $user->name;
    if (isset($user->field_user_first_name[$language])){
      $name = $user->field_user_first_name[$language][0]['value'];
      if (isset($user->field_user_first_name[$language])){
        $name .= ' '.$user->field_user_last_name[$language][0]['value'];
      }
    }

    $module = 'tm_invitations';
    $key = 'key';
    $language = language_default();
    $params = array();
    $from = NULL;
    $send = FALSE;
    $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);
    $message['subject'] = "Travel Massive Invitation from $name";
    $message['body'] = array();
    $message['body'][] = "Hi,";
    $message['body'][] = "I want to invite you to be a part of Travel Massive.";
    $message['body'][] = "Join the community and connect with me by visiting http://" . $_SERVER["SERVER_NAME"] . "/user/register";
    $message['body'][] = "Regards,";
    $message['body'][] = $name;

    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);

    // Format the message body.
    $message = $system->format($message);

    // Send e-mail.
    $message['result'] = $system->mail($message);
}

/* The helper function to detect original nid for the current page. */
function _orig_nid() {
  $orig_path = _orig_path();
  $node = menu_get_object('node', 1, $orig_path);
  $nid = (isset($node) ? $node->nid : 0 );
  return $nid;
}

/* The helper function to detect original path for the current page. */
function _orig_path() {
  $url = arg(0).'/'.arg(1);
  $path = (drupal_lookup_path('source', $url));
  return $path;
}